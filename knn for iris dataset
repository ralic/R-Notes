#iris Data visualization && iris Knn

#install packages requireds
install.packages("ggvis")

## NOTES## 
#####################################################################
# %>% operator works like pipeline, it is infix operator#############
# The infix operator %>% is not part of base R, 
# but is in fact defined by the package magrittr (CRAN) and 
# is heavily used by dplyr (CRAN).
##http://stackoverflow.com/questions/24536154/what-does-mean-in-r###
# iris %>% head() %>% summary() is equivalent to summary(head(iris)).
#####################################################################

#Plot iris data using X=Sepal.length and Y=Sepal.Width
#Fill with Species data label. The data would be shown in Viewer
#In the Viewer, you may download the graph in SVG or CANVAS format
iris
summary(iris)
## X/Y scatter chart
## X : Sepal.Length  , Y : Sepal.Width -- using layer_points()
iris %>% ggvis(~Sepal.Length, ~Sepal.Width, fill = ~Species) %>% layer_points()
## X : Petal.Length  , Y : Petal.Width-- using layer_points()
iris %>% ggvis(~Petal.Length, ~Petal.Width, fill = ~Species) %>% layer_points()
## X/Y histogram -- using layer_bars
iris %>%
  ggvis(x= ~Sepal.Length, y = ~Sepal.Width, fill=~Sepal.Length) %>%
  group_by(Sepal.Length) %>% 
  layer_bars() 

## Points with trend line
iris %>% ggvis(~Petal.Length, ~Petal.Width, fill = ~Species) %>% layer_smooths() %>% layer_points()
## Seperated trend charts
iris %>% ggvis(~Petal.Length, ~Petal.Width, fill = ~Species) %>% group_by(Species) %>% layer_smooths() %>% layer_points()


## Prepare Normalize function##
normalize <- function(x) {
  num <- x - min(x)
  denom <- max(x) - min(x)
  return (num/denom)
}
## Excute data normalization
iris_norm <- as.data.frame(lapply(iris[1:4], normalize))
summary(iris_norm)

## Selective See summary
#the c() function is added to the original command: 
#the columns petal width and sepal width are concatenated and 
#a summary is then asked of just these two columns of the Iris data set.
summary(iris[c("Petal.Width", "Sepal.Width")])

## KNN PACKAGE PREPARATION ##
library(class)

## DATAS SHUFFLEING ##
## DEFINE SEED FOR RANDOM NUMBER GENERATION
set.seed(1234) 

####################
## DATA SAMPLING  ##
## 1 for 67%      ##
## 2 for 33%      ##
## 1 for training ##
## 2 for testing  ##
####################

####################
##DATA INPUT SETUP##
####################
### OBSERVATIONS  ###
#####################
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
iris.training <- iris[ind==1, 1:4]
iris.test <- iris[ind==2, 1:4]


#####################
##DATA OUTPUT SETUP##
#####################
###TARGET VARIABLE###
#####################
iris.trainLabels <- iris[ind==1, 5]
iris.testLabels <- iris[ind==2, 5]


#####################
##PREDITION MODEL  ##
#####################
iris_pred <- knn(train = iris.training, test = iris.test, cl = iris.trainLabels, k=3)
iris_pred

### 
install.packages("gmodels")
library(gmodels)


## Note that the last argument prop.chisq indicates 
## whether or not the chi-square contribution of each cell is included. 
## The chi-square statistic is the sum of the contributions 
## from each of the individual cells and is used to decide 
## whether the difference between the observed and 
## the expected values is significant.
CrossTable(x = iris.testLabels, y = iris_pred, prop.chisq=FALSE)
#Animated rotation
library(tourr)
library(ggvis)
library(shiny)
aps <- 2
fps <- 30
mat <- rescale(as.matrix(flea[c(1,3,4)]))
tour <- new_tour(mat, grand_tour(), NULL)
start <- tour(0)
proj_data <- reactive({
  invalidateLater(1000 / fps, NULL);
  step <- tour(aps / fps)
  data.frame(center(mat %*% step$proj), species = flea$species)
})
proj_data %>% ggvis(~X1, ~X2, fill = ~species) %>%
  layer_points() %>%
  scale_numeric("x", domain = c(-1, 1)) %>%
  scale_numeric("y", domain = c(-1, 1)) %>%
  set_options(duration = 0)
